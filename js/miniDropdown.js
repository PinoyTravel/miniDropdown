// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    $.miniDropdown = function(element, options) {
      var animate, getSubNav, hide, hideAll, setElems, setState, show,
        _this = this;
      this.defaults = {
        activeClass: "active",
        animation: "slide",
        easing: "swing",
        show: 100,
        hide: 100,
        delayIn: 100,
        delayOut: 200,
        showFunc: null,
        hideFunc: null
      };
      this.state = '';
      this.settings = {};
      this.$element = $(element);
      animate = function($subnav, type) {
        return $subnav.stop(false, true)[_this.animateMethod[type]](_this.settings[type], _this.settings.easing, function() {
          return $(this)[type]();
        });
      };
      show = function($item, $subnav) {
        hideAll($item);
        $item.children("a").addClass(_this.settings.activeClass);
        window.clearTimeout($item.data("timeoutId"));
        return $item.data("timeoutId", window.setTimeout(function() {
          return animate($subnav, "show");
        }, _this.settings.delayIn));
      };
      hide = function($item, $subnav) {
        $item.children("a").removeClass(_this.settings.activeClass);
        window.clearTimeout($item.data("timeoutId"));
        return $item.data("timeoutId", window.setTimeout(function() {
          return animate($subnav, "hide");
        }, _this.settings.delayOut));
      };
      getSubNav = function($link) {
        return $link.children("ul").first();
      };
      setElems = function() {
        _this.$items = _this.$element.children("li");
        _this.$links = _this.$items.children("a");
        return _this.$subnavs = _this.$items.children("ul");
      };
      hideAll = function($item) {
        _this.$links.removeClass(_this.settings.activeClass);
        return _this.$subnavs.stop(false, true).hide();
      };
      setState = function(state) {
        this.state = state;
      };
      this.getState = function() {
        return state;
      };
      this.getSetting = function(settingKey) {
        return this.settings[settingKey];
      };
      this.callSettingFunction = function(functionName) {
        return this.settings[functionName]();
      };
      this.init = function() {
        var hasEasingFunc, self,
          _this = this;
        this.settings = $.extend({}, this.defaults, options);
        self = this;
        setElems();
        hasEasingFunc = $.isFunction($.easing[this.settings.easing]);
        if (!hasEasingFunc) {
          this.settings.easing = "swing";
        }
        switch (this.settings.animation) {
          case "fade":
            this.animateMethod = {
              show: "fadeIn",
              hide: "fadeOut"
            };
            break;
          case "slide":
            this.animateMethod = {
              show: "slideDown",
              hide: "slideUp"
            };
            break;
          default:
            this.animateMethod = {
              show: "show",
              hide: "hide"
            };
        }
        return this.$items.bind({
          mouseenter: function(e) {
            var $item, $subnav, fn;
            $item = $(e.currentTarget);
            $subnav = getSubNav($item);
            fn = ($.isFunction(_this.settings.showFunc) ? _this.settings.showFunc : show);
            return fn.apply(self, [$item, $subnav]);
          },
          mouseleave: function(e) {
            var $item, $subnav, fn;
            $item = $(e.currentTarget);
            $subnav = getSubNav($item);
            fn = ($.isFunction(_this.settings.hideFunc) ? _this.settings.hideFunc : hide);
            return fn.apply(self, [$item, $subnav]);
          }
        });
      };
      return this.init();
    };
    return $.fn.miniDropdown = function(options) {
      return this.each(function() {
        var miniDropdown;
        if (void 0 === ($(this)).data('miniDropdown')) {
          miniDropdown = new $.miniDropdown(this, options);
          return ($(this)).data('miniDropdown', miniDropdown);
        }
      });
    };
  });

}).call(this);
